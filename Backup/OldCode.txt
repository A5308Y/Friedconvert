
### THIS WAS A TRY TO CONSERVE THE LIBREOFFICE GENERATED HTML CODE. NOW THE HTML IS COMPLETELY
### CREATED ANEW

##Nur noch Zeilenumbrüche scheinen das Problem zu sein!

#### -> Problem: Die "#"'en sind in vielen Fällen vom Text durch Tags getrennt.
#### -> Lösungsidee: Snippets und Text einzeln wieder zusammensetzen, wie ich's oben auch auseinandergenommen hab.

#def replacehash(snippetlist, taglist):
#for i in xrange(len(snippetlist)):
#a = 1
#snippetchain_forward = snippetlist[i]
#snippetchain_backward = snippetlist[i]
#while ((snippetchain_forward).count("#") not in [0,2]) and a <= 3:
##print snippetchain_forward, str(snippetchain_forward.count("#"))
#snippetchain_forward = snippetchain_forward + snippetlist[i+a]
#a += 1
###########################



def snippetize(text):
  # Seperating the html_tags and the actual text. Then recreate the whole text without formatting
  # and store the captions and tags.
  snippettext = ''
  captionlist = []
  htmltaglist = []
  snippetlist = []

  snipseclist = []

  snipsecdict= {}
  section = "Header"
  snipsecdict[section] = ''


  for i in xrange(text.count("<")+1):
    htmltag = text.split("<")[i].split(">")[0] #returns the htmltag
    htmltaglist.append(htmltag)

    snippet = text.split(">")[i].split("<")[0] #retruns the text between the htmltags

    ###ABER ES GIBT ZWEI TAG PRO SNIPPET!!!

    if capture_caption(htmltag, snippet): # if a new caption is found
      section=capture_caption(htmltag, snippet)
      captionlist.append(section)
      snipsecdict[section] = ''

    snippetlist.append(snippet)
    snipseclist.append((snippet, section)) #to have a connection between lines and their section
    snippettext = snippettext + snippet

    snipsecdict[section] += snippet

  if snippettext.count("#")%(2) != 0:
    print "Odd number of '#'-Symbols. That's not good!"

  returndict = {"sniptext": snippettext, "sniplist": snippetlist,}
  returndict["captionlist"] = captionlist
  returndict["taglist"] = htmltaglist
  returndict["snipseclist"] = snipseclist
  returndict["snipsecdict"] = snipsecdict

  return returndict


  def dehashold(self, sniptext):
    ###Search for the text in between the "#"'s (every odd snippet), clear the formatting
    ###and store all snippets in a list.
    outsnips = []
    insnips = []
    if sniptext.count("#") == 0:
      outsnips = [sanitize_snippet(sniptext.split("#")[0], True)]
    else:
      for i in range((sniptext.count("#"))/2): #wenn das gleich null ist, kein Durchlauf...

        if i != 0:
          outsnippet = sniptext.split("#")[2*i]
          outsnippet = sanitize_snippet(outsnippet, True)
          if outsnippet !='':
            outsnips.append(outsnippet)

        insnippet = sniptext.split("#")[2*i+1]
        insnippet = sanitize_snippet(insnippet, False)

        if insnippet != '':
          insnips.append(insnippet)

### Um den letzten Abschnitt außerhalb der #'s im Text zu haben...
    outsnippet = sniptext.split("#")[-1]
    outsnippet = sanitize_snippet(outsnippet, True)
    if outsnippet !='':
      outsnips.append(outsnippet)
####

    return {"outsnips": outsnips, "insnips":insnips}


#def capture_caption(html_tag, snippet):
  ##Checks if a snippet is a Heading by searching its HTML_Tag for H#
  ##stores it in a given list and returns the caption
  #for i in xrange(10):
    #snippet = sanitize_snippet(snippet, False)
    #if html_tag.count("H"+str(i)) == 1 and snippet!='':
      #caption = snippet
      #return caption
    #elif html_tag.count("H"+str(i)) > 1:
      #pass
      ##print "SOMETHINGS WRONG!!!! with the Caption tags. Search for \"H"+str(i)+"\" "
       ###Da müssen noch die Style Vorgaben für Hx ausgeblendet werden...

#HTMLIZE
  #content = content.replace("\n", "<br>")
  #content = content.replace(unichr(252), "&uuml;")
  #content = content.replace(unichr(246), "&ouml;")
  #content = content.replace(unichr(214), "&Ouml;")
  #content = content.replace(unichr(220), "&Uuml;")
  #content = content.replace(unichr(223), "&szlig;")
  #content = content.replace(unichr(228), "&auml;")
  #content = content.replace(unichr(196), "&Auml;")

  #content = content.replace(unichr(195169), "&eacute;")

  #content = content.replace(unichr(194180), "\'")
  #content = content.replace(unichr(8222), "\"")
  #content = content.replace(unichr(8221), "\"")
  #content = content.replace(unichr(8220), "\"")

  #content = content.replace(unichr(8211), "-")
  #content = content.replace(unichr(8212), "-")


  #for vorlage in ["Head.txt"]:
      #vorfile = codecs.open(HTMLRES_Path + "/"+vorlage, 'r', "utf-8")
      #lines = vorfile.readlines()
      #vorfile.close()
      ##And write them in the new file, replacing ###TEXT### with the content
    #for line in lines:
      #line = line.replace("###COLOR###", colordic["Header"])
      #line = line.replace("###LEKNR###", 'Lektion '+str(self.lesson_nr))
      #line = line.replace("###LEKTITLE###", htmlize(lektitle))

    #for vorlage in ["SectionTitle.txt"]:
      #vorfile = codecs.open(HTMLRES_Path + "/"+vorlage, 'r', "utf-8")
      #lines = vorfile.readlines()
      #vorfile.close()
        #And write them in the new file, replacing ###TEXT### with the content
      #for line in lines:
        #line = line.replace("###TITLE###", htmlize(section))
        #if "Text" in section:
          #line = line.replace("###COLOR###", colordic["Text"])
          #line = line.replace("###MERKFILE###", merkdic["Text"])
        #else:
          #try:
            #line = line.replace("###COLOR###", colordic[section])
            #line = line.replace("###MERKFILE###", merkdic[section])
          #except:
            #line = line.replace("###COLOR###", "#000066")
            #line = line.replace("###MERKFILE###", "merkzeichen-w.jpg")

        #self.output += line

        
    #for vorlage in ["Body.txt"]:
      #vorfile = codecs.open(HTMLRES_Path + "/"+vorlage, 'r', "utf-8")
      #lines = vorfile.readlines()
      #vorfile.close()
        #And write them in the new file, replacing ###TEXT### with the content
      #for line in lines:
        #try:
          #line = line.replace("###TEXT###", content) #content.decode('utf-8', errors='ignore')#CODEC PROBLEM!!!
        #except UnicodeDecodeError:
          #print content
          #raise Error

        #if "Text" in section:
          #line = line.replace("###COLOR###", colordic["Text"])
        #else:
          #try:
            #line = line.replace("###COLOR###", colordic[section])
          #except:
            #line = line.replace("###COLOR###", "#000066")
        #self.output += line

run
  #dehasher = Dehasher()

  #parser = MyHTMLParser()
  #parser.feed(read_html(SRCFILE))
  #snipdic = parser.snipdic
  #writer = Writer(dehasher)
  #writer.create_html(snipdic)
  #writer.write_html()
  #writer.write_xml(XMLFILE, dehasher.inlist)


#PATH = "../lections/lek"+str(lesson_nr)+"/"

#OUTFILE = PATH+"lek"+str(lesson_nr)+"_LL.html"
#SRCFILE = PATH+"lek"+str(lesson_nr)+".html"
#XMLFILE = PATH+"lek"+str(lesson_nr)+".xml"